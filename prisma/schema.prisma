generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("NEON_DATABASE_URL")
}

// --- Enums ---

enum UserRole {
    USER
    ADMIN
    SUPER_ADMIN
}

enum TransactionStatus {
    PENDING
    COMPLETED
    FAILED
}

enum TransactionType {
    BUY
    SELL
}

enum IssueSeverity {
    NONE
    LOW
    MEDIUM
    HIGH
    CRITICAL
}

enum IssueType {
    SUSPICIOUS_LOGIN
    LARGE_TRANSACTION_VOLUME
    POTENTIAL_MARKET_MANIPULATION
    ACCOUNT_VERIFICATION_PENDING
    USER_REPORTED_ISSUE
    SYSTEM_ALERT
    OTHER
}

enum AchievementType {
    TOTAL_PROFIT
    PORTFOLIO_VALUE
    TOTAL_STOCKS_OWNED
    SPECIFIC_STOCK_OWNED
    TOTAL_TRADES
}

// Enum for the status of an Announcement type notification
enum AnnouncementStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

// Enum for different types of notifications
enum NotificationType {
    ANNOUNCEMENT
    TRANSACTION_SUCCESS
    TRANSACTION_FAILED
    LOGIN_ALERT
    ACHIEVEMENT_UNLOCKED
    PRICE_ALERT
    SYSTEM_MESSAGE
}

// Enum for the read status of a user's notification
enum NotificationReadStatus {
    UNREAD
    READ
}

// --- Models ---

model User {
    id                    String                 @id @default(cuid())
    email                 String                 @unique
    name                  String?
    password              String?
    role                  UserRole               @default(USER)
    image                 String?
    emailVerified         DateTime?
    accounts              Account[]
    isTwoFactorEnabled    Boolean                @default(false)
    TwoFactorConfirmation TwoFactorConfirmation?

    balance        Decimal @default(10000.00) @db.Decimal(12, 2)
    portfolioValue Decimal @default(0.00) @db.Decimal(12, 2)
    totalProfit    Decimal @default(0.00) @db.Decimal(12, 2)

    // Relations
    portfolio             Portfolio?
    transactions          Transaction[]
    watchlist             Watchlist?
    createdStocks         Stock[]           @relation("Stock_createdBy")
    adminWatchlistEntries AdminWatchlist[]
    sessions              Session[]
    userAchievements      UserAchievement[]
    authoredNotifications Notification[]    @relation("AuthoredNotifications") // Notifications/Announcements authored by this user (if admin)
    receivedNotifications Notification[]    @relation("ReceivedNotifications") // Notifications received by this user

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Portfolio {
    id        String   @id @default(cuid())
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    positions Position[]

    @@index([userId])
}

model Position {
    id              String  @id @default(cuid())
    portfolioId     String
    stockId         String
    quantity        Int
    averageBuyPrice Decimal @db.Decimal(12, 2)
    currentValue    Decimal @db.Decimal(12, 2)
    profitLoss      Decimal @db.Decimal(12, 2)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
    stock     Stock     @relation(fields: [stockId], references: [id])

    @@unique([portfolioId, stockId])
    @@index([portfolioId])
    @@index([stockId])
}

model Stock {
    id                  String   @id @default(cuid())
    symbol              String   @unique
    name                String
    description         String?
    logoUrl             String?
    sector              String?
    currentPrice        Decimal  @db.Decimal(12, 2)
    openPrice           Decimal? @db.Decimal(12, 2)
    highPrice           Decimal? @db.Decimal(12, 2)
    lowPrice            Decimal? @db.Decimal(12, 2)
    previousClose       Decimal? @db.Decimal(12, 2)
    volume              Int      @default(0)
    marketCap           Decimal? @db.Decimal(16, 2)
    isActive            Boolean  @default(true) // Can be traded
    isFrozen            Boolean  @default(false) // Trading temporarily halted
    priceChangeDisabled Boolean  @default(false)
    priceCap            Decimal? @db.Decimal(12, 2)
    createdById         String
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    // Volatility and jump settings for simulation
    volatility        Decimal @default(0.02) @db.Decimal(5, 4) // 0.0001 to 0.9999
    jumpProbability   Decimal @default(0.01) @db.Decimal(5, 4) // 0.0001 to 0.9999
    maxJumpMultiplier Decimal @default(1.10) @db.Decimal(5, 4) // 1.0001 to 2.0000

    // Relations
    createdBy      User            @relation("Stock_createdBy", fields: [createdById], references: [id]) // Relation is now optional
    positions      Position[]
    transactions   Transaction[]
    priceHistory   PriceHistory[]
    watchlistItems WatchlistItem[]
    achievements   Achievement[]

    @@index([symbol])
    @@index([createdById])
    @@index([isActive])
}

model PriceHistory {
    id             String   @id @default(cuid())
    stockId        String
    price          Decimal  @db.Decimal(12, 2)
    volume         Int
    timestamp      DateTime @default(now())
    wasJump        Boolean  @default(false)
    jumpPercentage Decimal? @db.Decimal(6, 2)

    // Relations
    stock Stock @relation(fields: [stockId], references: [id], onDelete: Cascade)

    @@index([stockId])
    @@index([timestamp])
    @@index([stockId, timestamp])
}

model Transaction {
    id          String            @id @default(cuid())
    userId      String
    stockId     String
    type        TransactionType
    status      TransactionStatus @default(COMPLETED)
    quantity    Int
    price       Decimal           @db.Decimal(12, 2)
    totalAmount Decimal           @db.Decimal(12, 2)
    timestamp   DateTime          @default(now())
    createdAt   DateTime          @default(now())

    // Relations
    user  User  @relation(fields: [userId], references: [id])
    stock Stock @relation(fields: [stockId], references: [id])

    @@index([userId])
    @@index([stockId])
    @@index([timestamp])
    @@index([status])
    @@index([type])
}

model Watchlist {
    id        String   @id @default(cuid())
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    items WatchlistItem[]

    @@index([userId])
}

model WatchlistItem {
    id          String   @id @default(cuid())
    watchlistId String
    stockId     String
    addedAt     DateTime @default(now())

    // Relations
    watchlist Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
    stock     Stock     @relation(fields: [stockId], references: [id], onDelete: Cascade)

    @@unique([watchlistId, stockId])
    @@index([watchlistId])
    @@index([stockId])
}

// --- Auth Models (NextAuth.js - generally standard) ---

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user                     User @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id     String @id @default(cuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// --- Admin Models ---

model AdminWatchlist {
    id              String        @id @default(cuid())
    userId          String
    issueType       IssueType
    issueSeverity   IssueSeverity @default(MEDIUM)
    description     String?
    relatedEntityId String?
    notes           String?
    resolved        Boolean       @default(false)
    createdBy       String
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt

    // Relation to the user
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([issueType])
    @@index([resolved])
    @@index([issueSeverity])
    @@index([createdAt])
    @@index([relatedEntityId])
}

// --- Achievement Models ---

model Achievement {
    id            String          @id @default(cuid())
    name          String
    description   String
    type          AchievementType
    level         Int             @default(1) // Level of the achievement (e.g., Profit Level 1, Profit Level 2)
    targetValue   Decimal         @db.Decimal(16, 2) // The value needed to unlock (e.g., 1000 profit, 100 shares)
    targetStockId String? // Optional: Link to a specific stock for SPECIFIC_STOCK_OWNED type
    icon          String? // Optional: Icon identifier
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt

    targetStock      Stock?            @relation(fields: [targetStockId], references: [id])
    userAchievements UserAchievement[]

    @@unique([type, level]) // Ensure only one achievement of a type exists per level
    @@index([type])
    @@index([targetStockId])
}

model UserAchievement {
    id            String   @id @default(cuid())
    userId        String
    achievementId String
    achievedAt    DateTime @default(now())

    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@unique([userId, achievementId])
    @@index([userId])
    @@index([achievementId])
}

// --- Unified Notification Model ---

model Notification {
    id                 String                 @id @default(cuid())
    title              String? // For announcements
    content            String // Main message content
    type               NotificationType // To distinguish ANNOUNCEMENT from others
    announcementStatus AnnouncementStatus? // DRAFT, PUBLISHED, ARCHIVED (only for type ANNOUNCEMENT)
    readStatus         NotificationReadStatus @default(UNREAD) // For user-specific read status of any notification

    userId   String? // Recipient user (if not a general announcement, or for read status tracking)
    authorId String? // Admin user who created the announcement

    publishedAt DateTime? // When an announcement was published

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user   User? @relation("ReceivedNotifications", fields: [userId], references: [id], onDelete: Cascade)
    author User? @relation("AuthoredNotifications", fields: [authorId], references: [id], onDelete: SetNull) // Admin who authored it

    @@index([userId])
    @@index([authorId])
    @@index([type])
    @@index([announcementStatus])
}
